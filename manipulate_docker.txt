1. install docker for Windows from official site
2. in root folder: cmd: mvnw clean package -DskipTests
3. form root/target copy 'task231-0.0.1-SNAPSHOT.jar' to src/main/docker
4. docker init in root folder
5. edit compose.yaml:
services:
  server:
    image: 'server-image'
    build:
      context: .
    container_name: server-container
    ports:
      - 8080:8080
    depends_on:
      - db
#        condition: service_healthy
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://db:5432/Overridetech
      - SPRING_DATASOURCE_USERNAME=${SPRING_DATASOURCE_USERNAME}
      - SPRING_DATASOURCE_PASSWORD=${SPRING_DATASOURCE_PASSWORD}
      - SPRING_JPA_HIBERNATE_DDL_AUTO=create-drop
      - SPRING_JPA_HIBERNATE_SHOW_SQL=true
      - dadata_apiToken=${dadata_APIKey}
      - dadata_secretKey=${dadata_secretKey}
#    env_file:
#      - variables.env
  db:
    image: postgres:latest
    container_name: database-container
#    user: postgres
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=Overridetech
    ports:
      - 5435:5432
#    healthcheck:
#      test: [ "CMD-SHELL", "pg_isready", "--quiet" ]
#      interval: 1s
#      timeout: 5s
#      retries: 10


6. {.env} file (exactly without title!)
dadata_APIKey=Token 772d963b48e6ded3d8f90348789f47b7ae5e8b66
dadata_secretKey=79f91022a7e2214c934329ec08effca00a60e9fb
SPRING_DATASOURCE_USERNAME=postgres
SPRING_DATASOURCE_PASSWORD=admin
POSTGRES_USER=postgres
POSTGRES_PASSWORD=admin

7. Dockerfile

FROM amazoncorretto:11
ARG JAR_FILE=task231-0.0.1-SNAPSHOT.jar
COPY ${JAR_FILE} application.jar
ENTRYPOINT ["java", "-jar", "application.jar"]


8. application.yml is no longer neccessary 

9. in root through cmd: docker-compose up

----------------------------------------------------------

Deploy on remote server:
on local machine(docker host):
1. sign-in and login in docker hub
2. login in terminal:
	docker login -u dockeruser7234 

3. Tag ready images:
	docker tag server-image dockeruser7234/server-image
	docker tag postgres dockeruser7234/postgres

4. push to hub:
	docker push dockeruser7234/server-image
	docker push dockeruser7234/postgres

on remote machine:

1. pull images from docker hub:
	docker pull dockeruser7234/server-image
	docker pull dockeruser7234/postgres

2. in-place put two files:

docker-compose.yaml

services:
  server:
    image: 'dockeruser7234/server-image'
    container_name: server-container
    ports:
      - 8080:8080
    depends_on:
      - db
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://db:5432/Overridetech
      - SPRING_DATASOURCE_USERNAME=${SPRING_DATASOURCE_USERNAME}
      - SPRING_DATASOURCE_PASSWORD=${SPRING_DATASOURCE_PASSWORD}
      - SPRING_JPA_HIBERNATE_DDL_AUTO=create-drop
      - SPRING_JPA_HIBERNATE_SHOW_SQL=true
      - dadata_apiToken=${dadata_APIKey}
      - dadata_secretKey=${dadata_secretKey}
  db:
    image: 'dockeruser7234/postgres'
    container_name: database-container
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=Overridetech
    ports:
      - 5433:5432



AND 

.env (the same)

3. in this folder: 

ssh-keygen -t rsa -b 4096 -C "keskeleene@gmail.com"
ssh vladislav@194.87.237.197

https://linuxize.com/post/how-to-use-scp-command-to-securely-transfer-files/

scp -r C:\Users\Bolotin\Desktop\toremote vladislav@194.87.237.197:/home/vladislav


docker-compose up

github actions